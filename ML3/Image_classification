import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.utils import class_weight
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense


X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)

#normalize images
X_train = X_train.astype('float32') / 255.0
X_val = X_val.astype('float32') / 255.0

#augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    zoom_range=0.2
)
datagen.fit(X_train)

#calculate class weights
weights = class_weight.compute_class_weight('balanced', np.unique(y_train), y_train)
class_weights = dict(enumerate(weights))

#model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(datagen.flow(X_train, y_train), epochs=20, validation_data=(X_val, y_val), class_weight=class_weights)


y_pred = model.predict(X_val)

#convert probabilities to class labels
y_pred_class = (y_pred > 0.5).astype(int).flatten()

#compute balanced accuracy, precision, recall... by scikit-learn's metrics
from sklearn.metrics import balanced_accuracy_score, classification_report

print("Balanced Accuracy:", balanced_accuracy_score(y_val, y_pred_class))
print(classification_report(y_val, y_pred_class))


print(np.shape(np.load("Xtest_Classification1.npy")))
